{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether every array element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var out = [ 0, 0, 0, 0, 0 ];\n* var arr = indexed( x, out, 1, 0, isPositive );\n* // returns [ true, true, false, false, false ]\n*/\nfunction indexed( x, out, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = true;\n\tio = offset;\n\tfor ( i = 0; i <= x.length - 1; i++ ) {\n\t\tif ( !flg ) {\n\t\t\tout[ io ] = flg;\n\t\t\tio += stride;\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !predicate.call( thisArg, x[ i ], i, x )) {\n\t\t\tflg = false;\n\t\t}\n\t\tout[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn out;\n}\n\n/**\n* Cumulatively tests whether every array element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = toAccessorArray( [ 1, 1, 0, 0, 0 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), arraylike2object( out ), 1, 0,  isPositive );\n*\n* var v = arr.get( 4 );\n* // returns false\n*/\nfunction accessors( x, out, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tflg = true;\n\tfor ( i = 0; i <= xdata.length - 1; i++ ) {\n\t\tif ( !flg ) {\n\t\t\toset( odata, io, flg );\n\t\t\tio += stride;\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !predicate.call( thisArg, xget( xdata, i ), i, xdata ) ) {\n\t\t\tflg = false;\n\t\t}\n\t\toset( odata, io, flg );\n\t\tio += stride;\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether every array element in a provided array passes a test implemented by a predicate function.\n*\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n* \t return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 1, 0, 1 ];\n*\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = assign( x, y, 2, 0, isPositive );\n* // returns [ true, null, true, null, true, null, false, null, false, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, out, stride, offset, predicate, thisArg ) {\n\tvar xo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( xo.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( xo, oo, stride, offset, predicate, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, out, stride, offset, predicate, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether every array element in a provided array passes a test implemented by a predicate function.\n*\n* @param {Collection} x - input collection\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function isPositive( value ) {\n* \treturn ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 1, 0, 1 ];\n*\n* var y = cueveryBy( x, isPositive );\n* // returns [ true, true, true, false, false ]\n*/\nfunction cueveryBy( x, predicate, thisArg ) {\n\tvar out = filled( false, x.length );\n\treturn assign( x, out, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default cueveryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether every array element in a provided array passes a test implemented by a predicate function.\n*\n* @module @stdlib/array-base-cuevery-by\n*\n* @example\n* import cueveryBy from '@stdlib/array-base-cuevery-by';\n*\n* function isPositive( value ) {\n*\t\treturn ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 1, 0, 1 ];\n* var y = cueveryBy( x, isPositive );\n* // returns [ true, true, true, false, false ]\n*\n* @example\n* import cueveryBy from '@stdlib/array-base-cuevery-by';\n*\n* var x = [ 1, 1, 1, 0, 1 ];\n*\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = cueveryBy.assign( x, y, 2, 0, isPositive );\n* // returns [ true, null, true, null, true, null, false, null, false, null ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["assign","x","out","stride","offset","predicate","thisArg","xo","oo","arraylike2object","accessorProtocol","xdata","odata","xget","oset","flg","io","i","data","accessors","length","call","indexed","cueveryBy","filled","setReadOnly","main"],"mappings":";;0TAgKA,SAASA,EAAQC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACnD,IAAIC,EACAC,EAIJ,OAFAD,EAAKE,EAAkBR,GACvBO,EAAKC,EAAkBP,GAClBK,EAAGG,kBAAoBF,EAAGE,kBAlEhC,SAAoBT,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACtD,IAAIK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAN,EAAQV,EAAEiB,KACVN,EAAQV,EAAIgB,KAEZL,EAAOZ,EAAEkB,UAAW,GACpBL,EAAOZ,EAAIiB,UAAW,GAEtBH,EAAKZ,EACLW,GAAM,EACAE,EAAI,EAAGA,GAAKN,EAAMS,OAAS,EAAGH,IAC7BF,GAKAV,EAAUgB,KAAMf,EAASO,EAAMF,EAAOM,GAAKA,EAAGN,KACnDI,GAAM,GAEPD,EAAMF,EAAOI,EAAID,GACjBC,GAAMb,IARLW,EAAMF,EAAOI,EAAID,GACjBC,GAAMb,EAUT,CAqCEgB,CAAWZ,EAAIC,EAAIL,EAAQC,EAAQC,EAAWC,GACvCJ,IAtHT,SAAkBD,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACpD,IAAIS,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKZ,EACCa,EAAI,EAAGA,GAAKhB,EAAEmB,OAAS,EAAGH,IACzBF,GAKAV,EAAUgB,KAAMf,EAASL,EAAGgB,GAAKA,EAAGhB,KACzCc,GAAM,GAEPb,EAAKc,GAAOD,EACZC,GAAMb,IARLD,EAAKc,GAAOD,EACZC,GAAMb,EAUT,CAoGCmB,CAASrB,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACrCJ,EACR,CC9HA,SAASqB,EAAWtB,EAAGI,EAAWC,GAEjC,OAAON,EAAQC,EADLuB,GAAQ,EAAOvB,EAAEmB,QACJ,EAAG,EAAGf,EAAWC,EACzC,CCSAmB,EAAAC,EAAA,SAAA1B"}